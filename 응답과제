1. 서버 사이드 렌더링과 클라이언트 사이드 렌더링의 차이점은?
    - 서버 사이드 렌더링 (SSR) : 서버쪽에서 렌더링을 하여 보내주는 방식으로 서버로부터 완전하게 만들어진 HTML 파일을 받아와 화면을 그리기 때문에 첫 화면 로딩 속도가 빠름
    - 즉, 브라우저가 서버에 매번 요청을 보내고 서버에서 처리하는 방식으로 화면을 렌더링하는 주체가 서버임

    - 첫페이지 로딩속도가 빠르고 검색엔진 최적화가 가능함
    - 그러나 초기 로딩 이후 페이지 이동 시 속도가 CSR에 비해 느리고 서버가 과부화 될 수도 있음

    - 클라이언트 사이드 렌더링 (CSR) : 클라이언트가 렌더링을 맡아서 하는 형식 
    - SSR 과 달리 HTML 파싱부터 JS 읽기까지 브라우저에서 하기때문에 처음에 화면을 띄우는 데 시간이 좀 걸림

    - 새로고침이 발생하지 않아 사용자 경험에 도움을 주고 필요한 데이터만 받아와서 트래픽이 감소하고 초기 로딩 이후 빠른 웹사이트 렌더링이 가능
    - 검색엔진 최적화에 보완필요 및 초기 로딩 느림

    ** 차이점 **
    - 웹페이지 로딩 시간
    - SSR 방식은 검색엔진 최적화가 가능하지만 CSR 방식은 검색엔진 최적화가 어려움
    - 단순하게 생각해도 SSR방식은 화면이 바뀔 때마다 매번 서버에 요청을 보내고 다시 그려야함 그러나 CSR은 처음에만 데이터를 받아와서 서버 자원 덜 사용

2. a 태그와 Link 컴포넌트의 차이점은?
    - <a> 태그는 HTML 표준으로, 페이지를 새로고침하여 이동 
    - 반면 Link 컴포넌트는 React Router와 같은 프레임워크에서 제공하며 페이지 유지한 채로 url만 변경, SPA에서 효율적인 페이지 전환을 위한 방법

3. 왜 폰트 파일과 이미지를 다른 경로에 저장하는 것일까? 해당 폴더 둘 다 정적인 파일을 보관할 수 있는데!
    - 폰트는 타이포그래피 리소스고, 이미지는 콘텐츠 리소스로 역할이 다름
    - 유지보수와 최적화를 위해서

4. 실제로는 Context API 보다는 상태관리 라이브러리를 많이 씁니다. 이 말을 다시 생각해보면, Context API가 가지는 문제점이 있다는 말입니다. 그 문제점이 무엇인가요?
    - Context API는 전역 상태 관리에 사용되지만, 상태 변경 시 모든 하위 컴포넌트를 리렌더링해야 한다는 점
    - 즉, 성능 문제, 상태관리의 어려움, 컴포넌트 재사용성 감소 문제가 발생